---
import type { GetStaticPaths } from "astro";
import { GET } from "../pages/api.ts";

let response = await GET(Astro);
const data = await response.json();
---

<div class="styleContainerMain">
  {
    data.externalData.map((dataitem) => (
      <div class="containerData">
        <div class="StyleContainer">
          <p>
            Sitio: <span>{dataitem.siteName}</span>
          </p>
          <p>
            User: <span>{dataitem.userName}</span>
          </p>
          <p>
            Password: <span>{dataitem.encryptedpassword}</span>
          </p>
          <p>
            Url: <span>{dataitem.url}</span>
          </p>
          <p>
            Nota: <span>{dataitem.note}</span>
          </p>
          <p>
            Creado: <span id="fecha-creacion">{dataitem.createDate}</span>
          </p>
          <p>
            Actualizado: <span id="fecha-update">{dataitem.updateDate}</span>
          </p>
          <p>
            Estatus: <span>{dataitem.securityStatus}</span>
          </p>
        </div>
        <div class="StyleBottom">
          <button
            style="background-color: rgb(212, 10, 10); color:white"
            class="buttonDelete"
            data-id={dataitem.id}
          >
            Eliminar
          </button>
          <a href={`/update/${dataitem.id}`}>
            <button
              style="background-color: rgba(37, 204, 120, 0.973); color:black"
              class="updateButton"
              data-id={dataitem.id}
            >
              Actualizar
            </button>
          </a>
        </div>
      </div>
    ))
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const dataItemDate = document.getElementById(
      "fecha-creacion"
    ) as HTMLElement;

    const date = new Date(dataItemDate.textContent).toLocaleString();
    dataItemDate.textContent = date;

    const dataItemDateUpdate = document.getElementById(
      "fecha-update"
    ) as HTMLElement;

    const dateUpdate = new Date(
      dataItemDateUpdate.textContent
    ).toLocaleString();
    // console.log(dateUpdate);
    dataItemDateUpdate.textContent = dateUpdate;
  });

  // Selecciona todos los botones con la clase "buttonDelete" y asocia el evento de clic
  document.addEventListener("DOMContentLoaded", () => {
    const deleteButtons = document.querySelectorAll(".buttonDelete");

    deleteButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const itemId = button.getAttribute("data-id"); // Obtenemos el ID del botón
        await deleteItem(Number(itemId)); // Llamamos a la función con el ID
      });
    });
  });

  const deleteItem = async (id: number) => {
    const urlApi = import.meta.env.PUBLIC_URL;

    const response = await fetch(
      // `http://localhost:5071/api/PasswordEntries/${id}`,
      `${urlApi}${id}`,
      {
        method: "DELETE",
      }
    );

    if (response.ok) {
      const data = await response.json();
      console.log(data.message);
    } else {
      console.error("Error al eliminar el item");
    }
  };
</script>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: 0;
  }
  .containerData {
    background-color: #202020;
    border-radius: 15px;
    width: auto;
    padding: 1.5rem;
    overflow: hidden;
  }
  p {
    flex: 0 0 calc(25% - 10px);
    margin: 0.5rem;
    box-sizing: border-box;
    border-radius: 10px;
    /* border: 1px solid #696969; */
    padding: 0.2rem;
    color: rgb(226, 43, 43);
    font-weight: bolder;
    /* color: white; */
    white-space: nowrap; /* evita que el texto se vaya a una nueva linea*/
    overflow: hidden; /* oculta el contenido desbordante */
    text-overflow: ellipsis; /* añade puntos suspensivoos al final */
  }
  p span{
    color: white;
    font-weight: 100;
    /* color: rgb(226, 43, 43); */

  }
  .StyleBottom {
    display: flex;
    text-align: center;
    justify-content: space-between;
    margin-top: 0.5rem;
  }
  button {
    padding: 0.7rem;
    border-radius: 10px;
    border: 0;
    cursor: pointer;
  }
  .StyleContainer {
    background-color: rgb(0, 51, 85);
    border-radius: 10px;
    padding: 0.6rem;
  }
  .styleContainerMain {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    width: 100%;
  }
</style>
